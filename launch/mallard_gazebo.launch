<?xml version="1.0"?>
<launch>
  <!-- Find model and set other parameters -->
  <arg name="model" default="$(find mallard_urdf)/urdf/mallard_main.xacro"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="gz" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- <arg name="box_model" default="$(find mallard_urdf)/urdf/floating_box.urdf"/> -->


  <!-- Gazebo world with desired characteristics as world_name -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="gui" value="$(arg gz)" />
    <arg name="paused" value="true"/>
    <!-- <arg name="world_name" value="$(find freefloating_gazebo)/world/underwater.world"/> -->
     <arg name="world_name" value="$(find mallard_urdf)/world/pond_w_floor.world"/>
  </include>

  <!-- <group ns="floating_box">
    <param name="robot_description" command="$(find xacro)/xacro $(arg box_model)"/>
    <node name="spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model floating_box -param robot_description -x 0.0 -y 2.0 -z 1.0 -R 0 -P 0 -Y 0" />
  </group> -->

  <!-- Robot generation in Gazebo. Must be in the same name space for plugin to work -->
  <group ns="mallard">
    <param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>
    <node name="spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-urdf -model mallard -param robot_description -x 0 -y 0 -z 1 -R 0 -P 0 -Y 0" />

    <!-- Thrusters control -->
    <!-- Load controller configurations (vehicle and arm) from YAML file to parameter server -->
    <rosparam file="$(find mallard_urdf)/config/vectored_mallard.yaml" command="load"/>
    <!-- Launch low-level PID control for arm body control will not activate as we expect direct thruster control -->
    <node name="pid_control" pkg="freefloating_gazebo" type="pid_control" output="screen" respawn="true"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" if="$(arg gui)">
        <param name="use_gui" value="true"/>
        <remap from="joint_states" to="joint_setpoint" />        
    </node>     

    <group ns="thrusters">
        <param name="robot_description" command="$(find xacro)/xacro $(find mallard_urdf)/urdf/control_thrusters.urdf"/>                         

        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" respawn="true" if="$(arg gui)">
          <param name="use_gui" value="true"/>
          <remap from="joint_states" to="/mallard/thruster_command" />
        </node>   
                      
    </group>
    
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher"/>
  </group>
  
  <!-- Background -->
  <!-- <param name="terrain_description" command="$(find xacro)/xacro $(find freefloating_gazebo_demo)/terrain/shipwreck/terrain.sdf"/>
  <node name="terrain_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-sdf -model terrain -param terrain_description -x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/> -->

 </launch>
